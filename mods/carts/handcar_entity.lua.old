minetest.register_entity("boost_cart:handcar", {
    	physical = false,
    	collisionbox = {-0.5, -0.45, -0.5, 0.5, 0.7, 0.5},
    	visual = "mesh",
    	mesh = "carts_handcar.obj",
    	visual_size = {x=1, y=1},
    	textures = {"carts_handcar_texture.png"},

    	passengers = "",
        driven = false,
        velocity = {x=0, y=0, z=0},
        old_dir = {x=1, y=0, z=0}, -- random value to start the cart
        old_pos = nil,
        old_switch = 0,
        sound_counter = 0,
        railtype = nil,
        on_activate = function(self, staticdata, dtime_s)
        	self.object:set_armor_groups({immortal=1})
        end,

        on_rightclick = function(self, clicker)
        	local player_name = clicker:get_player_name()
            local is_player_on = false
            local passenger_count = 0

            for passenger_name in string.gmatch(self.passengers, "%a+") do
                if passenger_name == player_name then
                    is_player_on = true
                end
                passenger_count = passenger_count + 1
            end

            -- Only 2 passengers are allowed
            if not is_player_on and passenger_count >= 2 then
                return
            end

            if not is_player_on then
                self.passengers = self.passengers .. player_name .. ";"
                default.player_attached[player_name] = self.object
                local y_pos = self.old_player_model and 6 or -4
                if clicker:get_properties().visual == "upright_sprite" then
                    y_pos = -4
                end
                clicker:set_attach(self.object, "", {x=0, y=y_pos, z=0}, {x=0, y=0, z=0})
                clicker:set_eye_offset({x=0, y=-4, z=0},{x=0, y=-4, z=0})
            else
                self.passengers = string.gsub(self.passengers, player_name .. ";", "")
                clicker:set_detach()
                clicker:set_eye_offset({x=0, y=0, z=0},{x=0, y=0, z=0})
                clicker:set_properties({})
            end
        end,

        on_punch = function(self, puncher, time_from_last_punch, tool_capabilities, direction)
            if puncher:get_player_control().sneak and not self.passengers[1] then
                if not minetest.settings:get_bool("creative_mode") then
                    if puncher:get_inventory():room_for_item("main", {name="boost_cart:handcar"}) then
                        puncher:get_inventory():add_item("main", "boost_cart:handcar")
                    else
                        minetest.add_item(self.object:get_pos(), "boost_cart:handcar")
                    end
        		end
        		self.object:remove()
        	end
        end,

        on_step = function(self, dtime)
            local pos = self.object:get_pos()
            local cart_dir = boost_cart:get_rail_direction(pos, self.old_dir, nil, nil, self.railtype)
            local vel = self.object:get_velocity()
            local braking = false

            for passenger_name in string.gmatch(self.passengers, "%a+") do
                local player = minetest.get_player_by_name(passenger_name)
                local ctrl = player:get_player_control()

                if ctrl.up then
                    self.driven = true
                    self.velocity = vector.multiply(cart_dir, 0.03)
                elseif ctrl.down then
                    self.driven = false
                    braking = true

                    if vector.equals(vel, {x=0, y=0, z=0}) then
                        braking = false
                    end
                else
                    self.driven = false
                    braking = false
                end
            end
            if self.driven then
                vel = vector.add(vel, self.velocity)
                self.object:set_velocity(vel)
                self.old_dir.y = 0
            elseif vector.equals(vel, {x=0, y=0, z=0}) then
                return
            end

    	    cart_dir = boost_cart:velocity_to_dir(vel)

        	local same_dir = vector.equals(cart_dir, self.old_dir)
        	local update = {}

        	if self.old_pos and not self.driven and same_dir then
        		local flo_pos = vector.round(pos)
        		local flo_old = vector.round(self.old_pos)
        		if vector.equals(flo_pos, flo_old) then
        			-- Do not check one node multiple times
        			return
        		end
        	end

        	local ctrl, player
        	local distance = 1

        	-- Get player controls
        	if self.driver then
        		player = minetest.get_player_by_name(self.driver)
        		if player then
        			ctrl = player:get_player_control()
        		end
        	end

        	local stop_wiggle = false
        	if self.old_pos and same_dir then
        		-- Detection for "skipping" nodes (perhaps use average dtime?)
        		-- It's sophisticated enough to take the acceleration in account
        		local acc = self.object:get_acceleration()
        		distance = dtime * (vector.length(vel) + 0.5 * dtime * vector.length(acc))

        		local new_pos, new_dir = boost_cart:pathfinder(
        			pos, self.old_pos, self.old_dir, distance, ctrl,
        			self.old_switch, self.railtype
        		)

        		if new_pos then
        			-- No rail found: set to the expected position
        			pos = new_pos
        			update.pos = true
        			cart_dir = new_dir
        		end
        	elseif self.old_pos and self.old_dir.y ~= 1 and not self.driven then
        		-- Stop wiggle
        		stop_wiggle = true
        	end

        	-- dir:         New moving direction of the cart
        	-- switch_keys: Currently pressed L(1) or R(2) key,
        	--              used to ignore the key on the next rail node
        	local dir, switch_keys = boost_cart:get_rail_direction(
        		pos, cart_dir, ctrl, self.old_switch, self.railtype
        	)
        	local dir_changed = not vector.equals(dir, self.old_dir)

        	local new_acc = {x=0, y=0, z=0}
        	if stop_wiggle or vector.equals(dir, {x=0, y=0, z=0}) then
        		vel = {x=0, y=0, z=0}
        		local pos_r = vector.round(pos)
        		if not boost_cart:is_rail(pos_r, self.railtype)
        				and self.old_pos then
        			pos = self.old_pos
        		elseif not stop_wiggle then
        			pos = pos_r
        		else
        			pos.y = math.floor(pos.y + 0.5)
        		end
        		update.pos = true
        		update.vel = true
        	else
        		-- Direction change detected
        		if dir_changed then
        			vel = vector.multiply(dir, math.abs(vel.x + vel.z))
        			update.vel = true
        			if dir.y ~= self.old_dir.y then
        				pos = vector.round(pos)
        				update.pos = true
        			end
        		end
        		-- Center on the rail
        		if dir.z ~= 0 and math.floor(pos.x + 0.5) ~= pos.x then
        			pos.x = math.floor(pos.x + 0.5)
        			update.pos = true
        		end
        		if dir.x ~= 0 and math.floor(pos.z + 0.5) ~= pos.z then
        			pos.z = math.floor(pos.z + 0.5)
        			update.pos = true
        		end

        		-- Calculate current cart acceleration
        		local acc = nil

        		local acc_meta = minetest.get_meta(pos):get_string("cart_acceleration")
        		if acc_meta == "halt" and not self.driven then
        			-- Stop rail
        			vel = {x=0, y=0, z=0}
        			acc = false
        			pos = vector.round(pos)
        			update.pos = true
        			update.vel = true
        		end
        		if acc == nil then
        			-- Meta speed modifier
        			local speed_mod = tonumber(acc_meta)
        			if speed_mod and speed_mod ~= 0 then
        				-- Try to make it similar to the original carts mod
        				acc = speed_mod * 10
        			end
        		end

        		if acc ~= false then
        			-- Handbrake
        			if braking then
        				acc = (acc or 0) - 4
        			elseif acc == nil then
        				acc = -0.4
        			end
        		end

        		if acc then
        			-- Slow down or speed up, depending on Y direction
        			acc = acc + dir.y * -2.1
        		else
        			acc = 0
        		end

        		new_acc = vector.multiply(dir, acc)
        	end

        	-- Limits
        	local max_vel = boost_cart.speed_max
        	for _,v in pairs({"x","y","z"}) do
        		if math.abs(vel[v]) > max_vel then
        			vel[v] = boost_cart:get_sign(vel[v]) * max_vel
        			new_acc[v] = 0
        			update.vel = true
        		end
        	end

        	self.object:set_acceleration(new_acc)
        	self.old_pos = vector.round(pos)
        	local old_y_dir = self.old_dir.y
        	if not vector.equals(dir, {x=0, y=0, z=0}) and not stop_wiggle then
        		self.old_dir = dir
        	else
        		-- Cart stopped, set the animation to 0
        		self.old_dir.y = 0
        	end
        	self.old_switch = switch_keys

        	boost_cart:on_rail_step(self, self.old_pos, distance)

        	if not (update.vel or update.pos) then
        		return
        	end
        	-- Re-use "dir", localize self.old_dir
        	dir = self.old_dir

        	local yaw = 0
        	if dir.x < 0 then
        		yaw = 0.5
        	elseif dir.x > 0 then
        		yaw = 1.5
        	elseif dir.z < 0 then
        		yaw = 1
        	end
        	self.object:set_yaw(yaw * math.pi)

        	local anim = {x=0, y=0}
        	if dir.y == -1 then
        		anim = {x=1, y=1}
        	elseif dir.y == 1 then
        		anim = {x=2, y=2}
        	end
        	self.object:set_animation(anim, 1, 0)

        	-- -- Change player model rotation, depending on the Y direction
        	-- if player and dir.y ~= old_y_dir then
        	-- 	local feet = {x=0, y=0, z=0}
        	-- 	local eye = {x=0, y=-4, z=0}
        	-- 	feet.y = boost_cart.old_player_model and 6 or -4
        	-- 	if dir.y ~= 0 then
        	-- 		-- TODO: Find a better way to calculate this
        	-- 		if boost_cart.old_player_model then
        	-- 			feet.y = feet.y + 2
        	-- 			feet.z = -dir.y * 6
        	-- 		else
        	-- 			feet.y = feet.y + 4
        	-- 			feet.z = -dir.y * 2
        	-- 		end
        	-- 		eye.z = -dir.y * 8
        	-- 	end
        	-- 	player:set_attach(self.object, "", feet,
        	-- 		{x=dir.y * -30, y=0, z=0})
        	-- 	player:set_eye_offset(eye, eye)
        	-- end

        	if update.vel then
        		self.object:set_velocity(vel)
        	end
        	if update.pos then
        		if dir_changed then
        			self.object:set_pos(pos)
        		else
        			self.object:move_to(pos)
        		end
        	end
        end
})

minetest.register_craftitem("boost_cart:handcar", {
	description = "Handcar (Sneak+Click to pick up)",
	inventory_image = "carts_handcar.png",
	wield_image = "carts_handcar.png",
	on_place = function(itemstack, placer, pointed_thing)
		if not pointed_thing.type == "node" then
			return
		end
		if boost_cart:is_rail(pointed_thing.under) then
			minetest.add_entity(pointed_thing.under, "boost_cart:handcar")
		elseif boost_cart:is_rail(pointed_thing.above) then
			minetest.add_entity(pointed_thing.above, "boost_cart:handcar")
		else
			return
		end

		if not minetest.settings:get_bool("creative_mode") then
			itemstack:take_item()
		end
		return itemstack
	end,
})

minetest.register_craft({
	output = "boost_cart:handcar",
	recipe = {
        {"","default:steel_ingot", ""},
		{"","default:steel_ingot", ""},
		{"default:steel_ingot", "default:steel_ingot", "default:steel_ingot"},
	},
})
